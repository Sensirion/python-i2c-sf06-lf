#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.32.0
# Product:       sf06_lf
# Model-Version: 1.1.0
#

import argparse
import time
from sensirion_i2c_driver import I2cConnection, CrcCalculator
from sensirion_shdlc_driver import ShdlcSerialPort, ShdlcConnection
from sensirion_shdlc_sensorbridge import (SensorBridgePort,
                                          SensorBridgeShdlcDevice,
                                          SensorBridgeI2cProxy)
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_sf06_lf.device import Sf06LfDevice
from sensirion_i2c_sf06_lf.commands import (InvFlowScaleFactors)


parser = argparse.ArgumentParser()
parser.add_argument('--serial-port', '-p', default='COM1')
args = parser.parse_args()

with ShdlcSerialPort(port=args.serial_port, baudrate=460800) as port:
    bridge = SensorBridgeShdlcDevice(ShdlcConnection(port), slave_address=0)
    bridge.set_i2c_frequency(SensorBridgePort.ONE, frequency=100e3)
    bridge.set_supply_voltage(SensorBridgePort.ONE, voltage=3.3)
    bridge.switch_supply_on(SensorBridgePort.ONE)
    i2c_transceiver = SensorBridgeI2cProxy(bridge, port=SensorBridgePort.ONE)
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x08,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Sf06LfDevice(channel)
    try:
        sensor.stop_continuous_measurement()
        time.sleep(0.1)
    except BaseException:
        ...
    (product_identifier, serial_number
     ) = sensor.read_product_identifier()
    print(f"product_identifier: {product_identifier}; "
          f"serial_number: {serial_number}; "
          )
    sensor.start_h2o_continuous_measurement()
    for i in range(500):
        try:
            time.sleep(0.02)
            (a_flow, a_temperature, a_signaling_flags
             ) = sensor.read_measurement_data(InvFlowScaleFactors.SLF3C_1300F)
            print(f"a_flow: {a_flow}; "
                  f"a_temperature: {a_temperature}; "
                  f"a_signaling_flags: {a_signaling_flags}; "
                  )
        except BaseException:
            continue
    sensor.stop_continuous_measurement()
